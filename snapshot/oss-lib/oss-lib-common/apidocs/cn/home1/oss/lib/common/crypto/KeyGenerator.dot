#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// cn.home1.oss.lib.common.crypto.AesKeyGenerator
	c4244 [label=<<table title="cn.home1.oss.lib.common.crypto.AesKeyGenerator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./AesKeyGenerator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> AesKeyGenerator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + AesKeyGenerator(spec : String) </td></tr>
<tr><td align="left" balign="left"> + generateKey() : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + getKey(spec : String) : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + generateAesKey(spec : String) : KeyExpression </td></tr>
		</table></td></tr>
		</table>>, URL="./AesKeyGenerator.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// cn.home1.oss.lib.common.crypto.JwtKeyGenerator
	c4247 [label=<<table title="cn.home1.oss.lib.common.crypto.JwtKeyGenerator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./JwtKeyGenerator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> JwtKeyGenerator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + JwtKeyGenerator(spec : String) </td></tr>
<tr><td align="left" balign="left"> + generateKey() : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + getKey(spec : String) : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + generateJwtKey(spec : String) : KeyExpression </td></tr>
		</table></td></tr>
		</table>>, URL="./JwtKeyGenerator.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// cn.home1.oss.lib.common.crypto.RsaKeyGenerator
	c4256 [label=<<table title="cn.home1.oss.lib.common.crypto.RsaKeyGenerator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./RsaKeyGenerator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> RsaKeyGenerator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + RsaKeyGenerator(spec : String) </td></tr>
<tr><td align="left" balign="left"> + generateKey() : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + getKey(spec : String) : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + convertPairFromPkcs8X509ToPkcs1(pairPkcs8X509 : KeyExpression) : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + convertPrivateKeyFromPkcs8ToPkcs1Pem(privateKeyPkcs8 : byte[]) : String </td></tr>
<tr><td align="left" balign="left"> + convertPublicKeyFromX509ToPkcs1Pem(publicKeyX509 : byte[]) : String </td></tr>
<tr><td align="left" balign="left"> + generateRsaKeyPair(provider : Provider, keyFormat : String, keySize : int) : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + generateRsaKeyPair(provider : Provider, keySize : int) : KeyPair </td></tr>
<tr><td align="left" balign="left"> + generateRsaKeyPairPkcs8X509(provider : Provider, keySize : int) : KeyExpression </td></tr>
<tr><td align="left" balign="left"> + pem(bytes : byte[], keyFormat : String, keyType : String) : String </td></tr>
		</table></td></tr>
		</table>>, URL="./RsaKeyGenerator.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// cn.home1.oss.lib.common.crypto.KeyGenerator
	c4271 [label=<<table title="cn.home1.oss.lib.common.crypto.KeyGenerator" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./KeyGenerator.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> KeyGenerator </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getSpec() : String </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + generateKey() : KeyExpression </font></td></tr>
<tr><td align="left" balign="left"><font face="Helvetica-Oblique" point-size="10.0"> + getKey(spec : String) : KeyExpression </font></td></tr>
		</table></td></tr>
		</table>>, URL="./KeyGenerator.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//cn.home1.oss.lib.common.crypto.AesKeyGenerator implements cn.home1.oss.lib.common.crypto.KeyGenerator
	c4271:p -> c4244:p [dir=back,arrowtail=empty,style=dashed];
	//cn.home1.oss.lib.common.crypto.JwtKeyGenerator implements cn.home1.oss.lib.common.crypto.KeyGenerator
	c4271:p -> c4247:p [dir=back,arrowtail=empty,style=dashed];
	//cn.home1.oss.lib.common.crypto.RsaKeyGenerator implements cn.home1.oss.lib.common.crypto.KeyGenerator
	c4271:p -> c4256:p [dir=back,arrowtail=empty,style=dashed];
}

